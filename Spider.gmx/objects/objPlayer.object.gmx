<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup crosshair
cursor_sprite = sprMouse;
window_set_cursor(cr_none);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

// Gameplay constants
grav = 0.3;   
webSpeed = 5;
moveSpeed = 4;
moveSpeedHorizontal = 4;
climbRate = 2;
gravWhenSwinging = 100;
gravWhenFalling = 50;

// Internal constants
isSwinging = false;
isShooting = false;
canShoot = true;
onGround = true;
startX = x;
startY = y;
imageStart = 8;
imageEnd = 8;
image_index = 8;
web = noone;
joint = noone;
thetaSpeed = 0;
speedOnRelease = 0;
depth = -999;
hsp = 0; 
vsp = 0; 

phy_fixed_rotation = true;
physics_world_update_speed(90);
physics_world_gravity(0, gravWhenSwinging);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Web shooting alarm
canShoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Web Shooting

//if (global.pause) exit;

var mouseDown =  device_mouse_check_button(0, mb_left);;

// fire if the mouse is clicked in range over block
if(mouseDown and canShoot){
    if(not isShooting and not isSwinging){
        physics_world_gravity(0, gravWhenSwinging);
    
        var targetX = mouse_x - x; 
        var targetY = mouse_y - y;
        var targetMagnitude = vectorMagnitude(targetX, targetY);
        var directionX = targetX / targetMagnitude;
        var directionY = targetY / targetMagnitude;

        web = instance_create(x, y, objWeb);
         
        with(web){
            phy_speed_x = 1000 * directionX;
            phy_speed_y = 1000 * directionY;
        }
        
        isShooting = true;
        onVine = false;
    } 
}

else{ // If mouse is not held down

    // Destroy web and joint after letting go of mouse
    if (isSwinging or isShooting) {
        speedOnRelease = phy_speed_x;
        if (joint) {
            physics_joint_delete(joint);
        }
        with(web) {
            instance_destroy();
        }   
    }
    
    physics_world_gravity(0, gravWhenFalling);
    isSwinging = false;
    isShooting = false;
}

if(not mouseDown){
    canShoot = true;
}









</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Web climbing 

//if (global.pause) exit;

if (isSwinging) {
    var kUp = keyboard_check(vk_up) || keyboard_check(ord('W'));
    var kDown = keyboard_check(vk_down) || keyboard_check(ord('S'));

    // Vector from player to pivot
    var webVectorX = (web.x - x);
    var webVectorY = (y - web.y);
    
    // Angle and length of webVector
    var theta = atan2(webVectorX, webVectorY);
    var webLength = vectorMagnitude(webVectorX, webVectorY);

    // Climbing up web
    webLength = webLength - kUp * climbRate + kDown * climbRate;
    
    phy_position_x = web.x - webLength * cos(theta);
    phy_position_y = web.y + webLength * sin(theta);
    
    physics_joint_delete(joint);
    joint = physics_joint_rope_create(self, objFloor,
        x, y, web.x, web.y, webLength, false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

//if (global.pause) exit;

// Get input 
var kLeft = -(keyboard_check(vk_left) || keyboard_check(ord('A'))); 
var kRight = keyboard_check(vk_right) || keyboard_check(ord('D')); 
var kUp = -(keyboard_check(vk_up) || keyboard_check(ord('W')));
var kDown = keyboard_check(vk_down) || keyboard_check(ord('S'));
var escape = keyboard_check(vk_escape);

// end the game
if(escape){
    game_end();
}

// Use input 
moveH = kLeft + kRight; 
moveV = kUp + kDown;

// Movement
if(onGround){
    phy_speed_x = speedOnRelease + moveH * moveSpeed;
    image_speed = .2;
    
    // animate right direction
    if(phy_speed_x &gt; 0){
        imageStart = 8;
        imageEnd = 15;
    }
    
    // animate left direction
    else if(phy_speed_x &lt; 0){
        imageStart = 0;
        imageEnd = 7;
    }
    
    // stay still
    else{
        imageEnd = imageStart + 1;
    }
    
    image_index = max(imageStart, image_index mod imageEnd);
}

// don't animate on vine
if(not onGround){
    image_speed = 0;
}

// Fell off platform
if(y &gt; room_height + 100){
    spiderDie();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for Floor Collision

var ground = instance_place(x, y + 18, objSurfaceNongrippable);
var mushroom = place_meeting(x, y + 18, objBounce);
             
if(ground){
    var vert = (ground.y &gt; phy_position_y + 17);
    if(vert){
        speedOnRelease = 0;
        onGround = true;
    }
}

else{
    onGround = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision with enemies

// manual collision checking is needed for physics and 
// non-physics objects needed
if(instance_exists(objPlayer)){

    // Collision with enemies
    if(collision_ellipse(phy_position_x - 41, phy_position_y - 23, 
                           phy_position_x + 17, phy_position_y + 17, 
                           objEnemyParent, false, false)){
        spiderDie();
    }
    
    // Collision with fly
    if(collision_ellipse(phy_position_x - 41, phy_position_y - 23, 
                           phy_position_x + 17, phy_position_y + 17, 
                           objFlyingEnemy, false, false)){
        spiderDie();
    }
    
    // manual collision checking for raindrop
    if(collision_ellipse(phy_position_x - 41, phy_position_y - 23, 
                           phy_position_x + 17, phy_position_y + 17, 
                           objRaindrop, false, false)){
        spiderDie();
    }  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objGoal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transition to next room
if(room_exists(room_next(room))){
    room_goto_next();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSurfaceNongrippable">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Allow collisions with nongrippable surface</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBounce">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bounce of Mushroom
phy_speed_y -= 5;
show_debug_message("bouncing");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,14</point>
    <point>80,14</point>
    <point>80,64</point>
    <point>12,64</point>
  </PhysicsShapePoints>
</object>
