<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables


// Gameplay constants
grav = 0.3;   
webSpeed = 5;
moveSpeed = 2;
moveSpeedHorizontal = 2;
climbRate = 2;
gravWhenSwinging = 100;
gravWhenFalling = 50;

// Internal constants
isSwinging = false;
isShooting = false;
canShoot = true;
onVine = false;
previousVineX = -1;
web = noone;
joint = noone;
thetaSpeed = 0;
speedOnRelease = 0;
depth = -999;
hsp = 0; 
vsp = 0; 

image_speed = 0.25;
phy_fixed_rotation = true;
physics_world_update_speed(90);
physics_world_gravity(0, gravWhenSwinging);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup crosshair
cursor_sprite = sprMouse;
window_set_cursor(cr_none);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Web shooting alarm
canShoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Web Shooting

if (global.pause) exit;

var mouseDown =  device_mouse_check_button(0, mb_left);;

// fire if the mouse is clicked in range over block
if(mouseDown and canShoot){
    if (not isShooting and not isSwinging) {
        physics_world_gravity(0, gravWhenSwinging);
    
        var targetX = mouse_x - x; 
        var targetY = mouse_y - y;
        var targetMagnitude = vectorMagnitude(targetX, targetY);
        var directionX = targetX / targetMagnitude;
        var directionY = targetY / targetMagnitude;

        web = instance_create(x, y, objWeb);
         
        with(web){
            // physics_apply_local_impulse(0, 0, 100 * directionX, 100 * directionY);
            phy_speed_x = 1000 * directionX;
            phy_speed_y = 1000 * directionY;
        }
        
        isShooting = true;
        onVine = false;
        //canShoot = false;
        //show_debug_message("canShoot set to false");
    }
     
}

else{ // If mouse is not held down

    // Destroy web and joint after letting go of mouse
    if (isSwinging or isShooting) {
        speedOnRelease = phy_speed_x;
        if (joint) {
            physics_joint_delete(joint);
        }
        with(web) {
            instance_destroy();
        }   
    }
    physics_world_gravity(0, gravWhenFalling);

    isSwinging = false;
    isShooting = false;
}

if(not mouseDown){
    canShoot = true;
}









</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Web climbing 

if (global.pause) exit;

if (isSwinging) {
    var kUp = keyboard_check(vk_up) || keyboard_check(ord('W'));
    var kDown = keyboard_check(vk_down) || keyboard_check(ord('S'));

    // Vector from player to pivot
    var webVectorX = (web.x - x);
    var webVectorY = (y - web.y);
    
    // Angle and length of webVector
    var theta = atan2(webVectorX, webVectorY);
    var webLength = vectorMagnitude(webVectorX, webVectorY);

    // Climbing up web
    webLength = webLength - kUp * climbRate + kDown * climbRate;
    
    phy_position_x = web.x - webLength * cos(theta);
    phy_position_y = web.y + webLength * sin(theta);
    
    physics_joint_delete(joint);
    joint = physics_joint_rope_create(self, objFloor,
        x, y, web.x, web.y, webLength, false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

if (global.pause) exit;

// Get input 
var kLeft = -(keyboard_check(vk_left) || keyboard_check(ord('A'))); 
var kRight = keyboard_check(vk_right) || keyboard_check(ord('D')); 
var kUp = -(keyboard_check(vk_up) || keyboard_check(ord('W')));
var kDown = keyboard_check(vk_down) || keyboard_check(ord('S'));
var escape = keyboard_check(vk_escape);

// end the game
if(escape){
    game_end();
}

// Use input 
moveH = kLeft + kRight; 
moveV = kUp + kDown;

if (not isSwinging and not isShooting) {
    phy_speed_x = speedOnRelease + moveH * moveSpeed;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision with enemy

// manual collision checking is needed for physics and
// non-physics objects needed
if(collision_ellipse(phy_position_x - 72, phy_position_y - 43, 
                       phy_position_x + 35, phy_position_y + 37, 
                       objEnemyParent, false, false)){
    show_message("dead");
}

// manual collision checking for raindrop
if(collision_ellipse(phy_position_x - 72, phy_position_y - 43, 
                       phy_position_x + 35, phy_position_y + 37, 
                       objRaindrop, false, false)){
    show_message("dead");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On floor

if (place_meeting(x, y + 5, objSurfaceNongrippable)) {
    show_debug_message("Landed on floor");
    speedOnRelease = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSurfaceNongrippable">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Allow collisions with nongrippable surface</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFloor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Collide with floor
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,32</point>
    <point>128,32</point>
    <point>128,112</point>
    <point>16,112</point>
  </PhysicsShapePoints>
</object>
