<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

grav = 1.0; 
hsp = 0; 
vsp = 0; 
jumpSpeed = 16; 
moveSpeed = 5;
maxfallspeed = 20;
onVine = true;
depth = -999;

firingWeb = false;
web = noone;
pivotX = -1;
pivotY = -1;
depth = -22;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Get input 

// end game
//if(escape){
  //  game_end();
//}

kLeft = -(keyboard_check(vk_left) || keyboard_check(ord('A'))); 
kRight = keyboard_check(vk_right) || keyboard_check(ord('D')); 
kUp = -(keyboard_check(vk_up) || keyboard_check(ord('W')));
kDown = keyboard_check(vk_down) || keyboard_check(ord('S'));

// Use input 
moveH = kLeft + kRight; 
moveV = kUp + kDown;

// Normal movement if not on vine
if(not onVine){
    hsp = moveH * moveSpeed;  
    
    // Falling   
    if (vsp &lt; maxfallspeed) { 
        vsp += grav;
    };

    // Vine collision
    if (place_meeting(x + hsp, y + vsp, objVine)) {
        onVine = true;
        vsp = 0;
        hsp = 0; 
    }
}

// Movement on Vine
else if(not firingWeb){
    vsp = moveV * moveSpeed;
}

//CrawlingBug collision
//if (place_meeting(pivot_x, pivot_y, objCrawlingEnemy)) {
//    onVine = false;
//}
    
//FlyingEnemy collision
if (place_meeting(x, y, objFlyingEnemy)) {
    show_message("Dead!");
}

//Raindrop collision
if (place_meeting(x, y, objRaindrop)) {
    show_message("Dead!");
}

// H Floor Collisions 
if (place_meeting(x + hsp, y, objFloor)) { 
    show_message("Dead!");
} 
x += hsp;

// v Floor Collisions 
if (place_meeting(x, y + vsp, objFloor)) { 
    show_message("Dead!"); 
}
y += vsp;

// Make sure to delete web after firing
if(web != noone and not firingWeb){
    with(web){
        instance_destroy();
    }
    web = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
