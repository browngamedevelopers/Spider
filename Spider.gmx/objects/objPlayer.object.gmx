<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

grav = 0.3;  
hsp = 0; 
vsp = 0; 
jumpSpeed = 16; 
moveSpeed = 2;
maxfallspeed = 20;
depth = -999;

isSwinging = false;
firingWeb = false;
onVine = true;
previousVineX = -1;;
web = noone;
thetaSpeed = 0;
pivotX = -1;
pivotY = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Get input 
var kLeft = -(keyboard_check(vk_left) || keyboard_check(ord('A'))); 
var kRight = keyboard_check(vk_right) || keyboard_check(ord('D')); 
var kUp = -(keyboard_check(vk_up) || keyboard_check(ord('W')));
var kDown = keyboard_check(vk_down) || keyboard_check(ord('S'));
var escape = keyboard_check(vk_escape);

// end the game
if(escape){
    game_end();
}

// Use input 
moveH = kLeft + kRight; 
moveV = kUp + kDown;

// Normal movement if not on vine
if(not onVine){
    //hsp = moveH * moveSpeed;
    // Falling   
    if (not firingWeb) { 
        vsp += grav;
    }

    // Vine collision
    if(place_meeting(x + hsp, y + vsp, objVine)){
        //onVine = true;
        vsp = 0;
        hsp = 0;
    }
}

// Movement on Vine
else if (not firingWeb and onVine){
    vsp = moveV * moveSpeed;
}

// H Floor Collisions 
if (place_meeting(x + hsp, y, objFloor)) { 
    show_message("Dead!");
} 

// v Floor Collisions 
if (place_meeting(x, y + vsp, objFloor)) { 
    show_message("Dead!"); 
}

// Make sure to delete web after firing
if(web != noone and not firingWeb){
    with(web){
        instance_destroy();
    }
    web = noone;
}

show_debug_message("HSP: " + string(hsp));
show_debug_message("VSP: " + string(vsp));
x += hsp;
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swinging physics

if (isSwinging) {

    // Get input 
    var kUp = -(keyboard_check(vk_up) || keyboard_check(ord('W')));
    var kDown = keyboard_check(vk_down) || keyboard_check(ord('S'));

    if (kUp) {
    
    }
    
    var webVectorX = (pivotX - x);
    var webVectorY = (y - pivotY);
    var theta = atan2(webVectorX, webVectorY);
    hsp = 0;
    vsp = 0;
    show_debug_message("theta; " + string(theta * 180 / pi));
    var webLength = vectorMagnitude(webVectorX, webVectorY);
    
    /*
    var tangentX = 1
    var tangentY = -webVectorX / webVectorY;
    var tangentMag = vectorMagnitude(tangentX, tangentY);
    var tangentX = tangentX / tangentMag;
    var tangentY = tangentY / tangentMag;
    var force = grav;
    var forceTangent = force * cos(theta);
    
    var projectedX = x + forceTangent * tangentX;
    var projectedY = y + forceTangent * tangentY;
    var newAngle = atan2(pivotX - projectedX, projectedY - pivotY);
    */
    
    thetaAcceleration = grav * cos(theta) / webLength;
    thetaSpeed = thetaSpeed + thetaAcceleration;
    newAngle = theta + thetaSpeed;
    //x = pivotX - webLength * cos(newAngle);
    //y = pivotY + webLength * sin(newAngle);
    
    x = pivotX - webLength * cos(newAngle);
    y = pivotY + webLength * sin(newAngle);
  
    // hsp = hsp + forceTangent * tangentX;
    // vsp = vsp - forceTangent * tangentY;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEnemyParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision with Enemy (death)

show_message("dead");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
