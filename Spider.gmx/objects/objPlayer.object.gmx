<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup crosshair

cursor_sprite = sprMouse;
window_set_cursor(cr_none);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

// Gameplay constants
grav = 0.3;   
webSpeed = 5;
moveSpeed = 5;

// Internal constants
isSwinging = false;
onVine = true;
previousVineX = -1;;
web = noone;
thetaSpeed = 0;
depth = -999;
hsp = 0; 
vsp = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Get input 
var kLeft = -(keyboard_check(vk_left) || keyboard_check(ord('A'))); 
var kRight = keyboard_check(vk_right) || keyboard_check(ord('D')); 
var kUp = -(keyboard_check(vk_up) || keyboard_check(ord('W')));
var kDown = keyboard_check(vk_down) || keyboard_check(ord('S'));
var escape = keyboard_check(vk_escape);

// end the game
if(escape){
    game_end();
}

// Use input 
moveH = kLeft + kRight; 
moveV = kUp + kDown;

// Normal movement if not on vine
if (not onVine){
    //hsp = moveH * moveSpeed;
    // Falling   
    if (not isSwinging) { 
        vsp += grav;
        
        // Vine collision
        if (place_meeting(x + hsp, y + vsp, objVine)){
            onVine = true;
            vsp = 0;
            hsp = 0;
        }
    }

// Movement on Vine
} else if ((not isSwinging) and onVine) { 
    vsp = moveV * moveSpeed;
}


// H Floor Collisions 
if (place_meeting(x + hsp, y, objFloor)) { 
    show_message("Dead!");
} 

// v Floor Collisions 
if (place_meeting(x, y + vsp, objFloor)) { 
    show_message("Dead!"); 
}

x += hsp;
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swinging physics

if (isSwinging) {

    // Don't move normally when swinging
    hsp = 0;
    vsp = 0;

    // Get input 
    var kUp = keyboard_check(vk_up) || keyboard_check(ord('W'));
    var kDown = keyboard_check(vk_down) || keyboard_check(ord('S'));

    // Vector from player to pivot
    var webVectorX = (web.pivotX - x);
    var webVectorY = (y - web.pivotY);
    
    // Angle and length of webVector
    var theta = atan2(webVectorX, webVectorY);
    var webLength = vectorMagnitude(webVectorX, webVectorY);
    
    // Calculate angular acceleration and adjust angular momentum accordingly
    thetaAcceleration = grav * cos(theta) / webLength;
    thetaSpeed = thetaSpeed + thetaAcceleration;
    newAngle = theta + thetaSpeed;
    
    // Climbing up web
    var webLength = webLength - kUp * 3 + kDown * 3;
    
    x = pivotX - webLength * cos(newAngle);
    y = pivotY + webLength * sin(newAngle);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Web Shooting

var mouseDown = device_mouse_check_button(0, mb_left);

// fire if the mouse is clicked in range over block
if (mouseDown) { //and instance_position(mouse_x, mouse_y, objFloor)) {    
    // and distance_to_object(objPlayer) &lt; maxWebLength 
    // create a web towards x and y from the spider
    if (not isSwinging) {
        pivotX = mouse_x;
        pivotY = mouse_y;
        
        // Converts linear momentum into angular momentum on shooting web
        var r = sqrt(power(pivotX - x, 2) + power(pivotY - y, 2));
        thetaSpeed = (-(pivotY - y) * hsp + (pivotX - x) * vsp) / power(r, 2);

        web = instance_create(x, y, objWeb);
        // web.image_angle = (point_direction(x, y, pivotX, pivotY) + 90) % 360;
        web.pivotX = pivotX;
        web.pivotY = pivotY;
        
        isSwinging = true;
        onVine = false;
    }
     
} else { // If mouse is not held down
    // Do only once on release
    if (isSwinging) {
        var t = arctan2(web.pivotY - y, web.pivotX - x);
        var r = sqrt(power(web.pivotY - y, 2) + power(web.pivotX - x, 2));

        // Converting angular momentum to linear velocity on release
        releaseVelocity = thetaSpeed * r;
        hsp = - thetaSpeed * sin(t) * r;
        vsp = thetaSpeed * cos(t) * r;
    }
    
    // Make sure to delete web after firing
    if (not isSwinging) {
        with(web) {
          instance_destroy();
        }
    }
    isSwinging = false;
}










</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEnemyParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision with Enemy (death)

show_message("dead");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
